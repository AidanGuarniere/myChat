I will provide you with context on a software development task. Afterwards, I you will generate a comprehensive JSON file to formulate our solution using precise language. If approved, we will proceed with coding our solution.
context: {
  goal: "I do not want to re-fetch chat-contents that I have already fetched and stored to state unless there has been an update in the data",
  code: {
    pages/index {
      description: "Homepage of application",
      codeSnippet: "import React, { useState, useEffect } from "react";
      import Head from "next/head";
      import Dashboard from "../components/Dashboard";
      import Dialogue from "../components/Dialogue";
      import axios from "axios";
      import { useSession } from "next-auth/react";
      import { useRouter } from "next/router";
      
      export default function Home() {
        const [chats, setChats] = useState([]);
        const [selectedChat, setSelectedChat] = useState(null);
        const [userText, setUserText] = useState("");
        const [error, setError] = useState(null);
        const [selectedChatLoading, setSelectedChatLoading] = useState(null);
        const { data: session, status } = useSession();
        const router = useRouter();
      
        useEffect(() => {
          if (status === "unauthenticated") {
            router.push("/auth");
          } else if (session && status === "authenticated") {
            const fetchChatTitles = async () => {
              try {
                const response = await axios.get("/api/chat-titles");
                if (response.data) {
                  setChats(response.data);
                }
              } catch (error) {
                setError(error);
                console.error("Error fetching chat titles:", error);
              }
            };
      
            fetchChatTitles();
          }
        }, [status, router]);
      
        useEffect(() => {
          if (selectedChat !== null) {
            setSelectedChatLoading(true);
            const fetchSelectedChat = async () => {
              try {
                const response = await axios.post("/api/chat-contents", { selectedChatId: selectedChat });
                if (response.data) {
                  const updatedChats = [...chats];
                  const selectedIndex = updatedChats.findIndex(chat => chat.id === selectedChat);
                  updatedChats[selectedIndex] = response.data;
                  setChats(updatedChats);
                }
              } catch (error) {
                setError(error);
                console.error("Error fetching selected chat:", error);
              } finally {
                setSelectedChatLoading(false);
              }
            };
        
            fetchSelectedChat();
          }
        }, [selectedChat]);
        
      
        return (
          <>
            <Head>
              <title>myGPT</title>
              <meta name="description" content="Generated by create next app" />
              <meta name="viewport" content="width=device-width, initial-scale=1" />
              <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="w-screen h-screen mx-auto overflow-hidden bg-white p-0">
              <Dashboard
                chats={chats}
                userText={userText}
                setUserText={setUserText}
                setChats={setChats}
                setError={setError}
                selectedChat={selectedChat}
                setSelectedChat={setSelectedChat}
              />
              <main className="relative h-full w-full transition-width flex flex-col overflow-hidden items-stretch flex-1">
                {status === "authenticated" && (
                  <div className="flex overflow-x-hidden items-bottom">
                    <Dialogue
                      session={session}
                      userText={userText}
                      setUserText={setUserText}
                      error={error}
                      setError={setError}
                      chats={chats}
                      setChats={setChats}
                      selectedChat={selectedChat}
                      setSelectedChat={setSelectedChat}
                      selectedChatLoading={selectedChatLoading}
                      setSelectedChatLoading={setSelectedChatLoading}
                    />
                  </div>
                )}
              </main>
            </div>
          </>
        );
      }
"      
    },
    
  },
  packageJson: {
  "dependencies": {
    "@next-auth/mongodb-adapter": "^1.1.1",
    "@next/font": "13.1.1",
    "@tailwindcss/typography": "^0.5.9",
    "axios": "^1.2.2",
    "bcrypt": "^5.1.0",
    "dotenv": "^16.0.3",
    "eslint": "8.31.0",
    "eslint-config-next": "13.1.1",
    "highlight.js": "^11.7.0",
    "lowlight": "^2.8.1",
    "mongoose": "^7.0.1",
    "nanoid": "^4.0.2",
    "next": "13.1.1",
    "next-auth": "^4.21.1",
    "openai": "^3.2.1",
    "react": "^18.2.0",
    "react-dom": "18.2.0",
    "react-lowlight": "^3.0.0",
    "react-syntax-highlighter": "^15.5.0",
    "rehype": "^12.0.1",
    "rehype-raw": "^6.1.1",
    "rehype-react": "^7.1.2",
    "rehype-sanitize": "^5.0.1",
    "remark": "^14.0.2",
    "remark-parse": "^10.0.1",
    "remark-react": "^9.0.1",
    "remark-rehype": "^10.1.0",
    "unified": "^10.1.2",
    "uuidv4": "^6.2.13"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.13",
    "postcss": "^8.4.21",
    "tailwindcss": "^3.2.6"
  }},
  additionalInfo: "perhaps useMemo could be helpful"
} 


Please utilize the JSON template below to build a detailed action plan based on the context provided:
```{
  "projectContext": {
    "dependencies": {},
    "applicationDetails": "Relevant description of the code provided in context",
    "goal": "What is the user trying to do?",
    "desiredContext": "Request(s) for the user to provide additional info, if any"
  },
  "tasks": [
    {
      "id": 1,
      "type": "Task type",
      "name": "",
      "requirements": [
        {
          "id": 1,
          "description": "Requirement description"
        }
      ],
      "constraints": [
        {
          "id": 1,
          "description": "Constraint description"
        }
      ],
      "reasoning": "Explanation of how this task addresses the problem, including console messages if relevant"
    }
  ],
  "solution": "Explanation of the entire planned course of action, how it meets the user's goals, and why this is the optimal solution"
}```
